{"version":3,"file":"static/js/72.e17e3ad2.chunk.js","mappings":"oMACA,SAAgB,UAAY,oCAAoC,MAAQ,gCAAgC,oBAAsB,8CAA8C,UAAY,oCAAoC,SAAW,mCAAmC,cAAgB,wCAAwC,KAAO,gC,aCIzU,MAgCA,EAhCyBA,IAGlB,IAHmB,+BACxBC,EAA8B,mBAC9BC,GACDF,EACC,OACEG,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAOC,UAAUC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAOI,kBAAkBF,UACvCJ,EAAAA,EAAAA,MAAA,MAAIC,UAAWC,EAAOK,MAAMH,SAAA,CAAC,4CAE3BJ,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAOM,oBAAoBJ,SAAA,CACzCK,KAAKC,MAAMZ,IACZO,EAAAA,EAAAA,KAAA,QAAMJ,UAAWC,EAAOS,UAAUP,SAAC,kBAIzCJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAOU,cAAcR,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAIJ,UAAWC,EAAOW,SAAST,SAAC,8BAChCC,EAAAA,EAAAA,KAAA,MAAIJ,UAAWC,EAAOY,KAAKV,SACxBL,EAAmBgB,MAAM,EAAG,GAAGC,KAAI,CAACC,EAASC,KAC5Cb,EAAAA,EAAAA,KAAA,MAAAD,SAAiBa,EAAQV,OAAhBW,WAKflB,EAAAA,EAAAA,MAACmB,EAAAA,GAAI,CAACC,GAAI,SAAShB,SAAA,CAChB,KACDC,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,CAACC,KAAM,6BAEZ,EChCV,EAAgC,6CAAhC,EAAqF,qCAArF,EAA0I,6CAA1I,EAA8L,oCAA9L,EAAkP,6CAAlP,EAAgT,8CAAhT,EAA+W,8CAA/W,EAAqa,qCAAra,EAAkd,qCAAld,EAAogB,0CAApgB,EAA+jB,8CAA/jB,EAA0nB,0CAA1nB,EAA6qB,sCAA7qB,EAAouB,8C,cCUpuB,MAoKA,EApK8BzB,IAA0B,IAAzB,gBAAE0B,GAAiB1B,EAChD,MAAMW,GAAsBgB,EAAAA,EAAAA,IAAYC,EAAAA,IAClC1B,GAAqByB,EAAAA,EAAAA,IAAYE,EAAAA,IAEjCC,GAAWC,EAAAA,EAAAA,OACVC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CACvCC,OAAQ,GACRC,cAAe,GACfC,IAAK,GACLC,cAAe,GACfC,gBAAiB,MAGZC,EAAQC,IAAaP,EAAAA,EAAAA,UAAS,OAC9BQ,EAAaC,IAAkBT,EAAAA,EAAAA,WAAS,GAIzCU,EAAgBC,IACpB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1Bf,GAAWgB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIjB,GAAQ,IAAE,CAACc,GAAOC,IAAQ,EA6B7C,OACEvC,EAAAA,EAAAA,KAAA,WAAAD,UACEJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAqBE,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAIJ,UAAWC,EAAaE,SAAC,mDAG7BJ,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAa6C,SAhCfC,UACnBN,EAAEO,iBAEF,MAAMC,GAAeJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChBjB,GAAQ,IACXG,OAAQmB,OAAOtB,EAASG,QACxBC,cAAekB,OAAOtB,EAASI,eAC/BC,IAAKiB,OAAOtB,EAASK,KACrBC,cAAegB,OAAOtB,EAASM,eAC/BC,gBAAiBe,OAAOtB,EAASO,mBAGnC,IACE,MAAMgB,QAAazB,EAASJ,EAAgB2B,IAC5CG,QAAQC,IAAIF,GACZd,EAAUc,GACVZ,GAAe,EACjB,CAAE,MAAOe,GACPF,QAAQE,MAAM,uBAAwBA,EACxC,GAayDnD,SAAA,EACnDJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAqBE,SAAA,EACnCJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAqBE,SAAA,EACnCJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAsBE,SAAA,EACpCC,EAAAA,EAAAA,KAAA,SACEmD,KAAK,SACLC,GAAG,SACHd,KAAK,SACLe,YAAY,SACZd,MAAOf,EAASG,OAChB2B,SAAUlB,EACVxC,UAAWC,EACX0D,UAAQ,KAEVvD,EAAAA,EAAAA,KAAA,SAAOwD,QAAQ,SAAS5D,UAAWC,EAAaE,SAAC,iBAKnDJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAsBE,SAAA,EACpCC,EAAAA,EAAAA,KAAA,SACEmD,KAAK,SACLC,GAAG,MACHd,KAAK,MACLe,YAAY,MACZd,MAAOf,EAASK,IAChByB,SAAUlB,EACVxC,UAAWC,EACX0D,UAAQ,KAEVvD,EAAAA,EAAAA,KAAA,SAAOwD,QAAQ,MAAM5D,UAAWC,EAAaE,SAAC,cAKhDJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAsBE,SAAA,EACpCC,EAAAA,EAAAA,KAAA,SACEmD,KAAK,SACLC,GAAG,gBACHd,KAAK,gBACLe,YAAY,iBACZd,MAAOf,EAASM,cAChBwB,SAAUlB,EACVxC,UAAWC,EACX0D,UAAQ,KAEVvD,EAAAA,EAAAA,KAAA,SAAOwD,QAAQ,gBAAgB5D,UAAWC,EAAaE,SAAC,4BAM5DJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAsBE,SAAA,EACpCJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAsBE,SAAA,EACpCC,EAAAA,EAAAA,KAAA,SACEmD,KAAK,SACLC,GAAG,gBACHd,KAAK,gBACLe,YAAY,iBACZd,MAAOf,EAASI,cAChB0B,SAAUlB,EACVxC,UAAWC,EACX0D,UAAQ,KAEVvD,EAAAA,EAAAA,KAAA,SAAOwD,QAAQ,gBAAgB5D,UAAWC,EAAaE,SAAC,yBAK1DJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAsBE,SAAA,EACpCC,EAAAA,EAAAA,KAAA,SAAOJ,UAAWC,EAAsBE,SAAC,kBACzCC,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAkBE,SA9G1B,CAAC,IAAK,IAAK,IAAK,KA+GPY,KAAKwC,IAClBxD,EAAAA,EAAAA,MAAA,SAAkBC,UAAWC,EAAkBE,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SACEmD,KAAK,QACLb,KAAK,kBACLC,MAAOY,EACPM,QAASjC,EAASO,kBAAoBoB,EACtCG,SAAUlB,EACVmB,UAAQ,IAETJ,IATSA,iBAgBtBnD,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,CACLC,KAAM,sBACNkC,KAAM,SACNO,WAAY7D,OAIfqC,GAAeF,IACdhC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAK,CAACC,iBA3GUC,KACvB1B,GAAe,EAAM,EA0G4B2B,UAAW5B,EAAYnC,UAChEC,EAAAA,EAAAA,KAAC+D,EAAgB,CACftE,+BAAgCU,EAChCT,mBAAoBA,UAKpB,C,wFCvKd,MAIA,EAJasE,KACJhE,EAAAA,EAAAA,KAACiE,EAAAA,EAAqB,CAAC/C,gBAAiBgD,EAAAA,I,qDCH1C,MAAMC,EAAkBC,GAAUA,EAAMC,QAAQC,SAE1ClD,EAA6BgD,GACxCA,EAAMC,QAAQ5E,+BAEH4B,EAA4B+C,GACvCA,EAAMC,QAAQ3E,kB","sources":["webpack://health-project-app/./src/components/RecommendedDaily/RecommendedDaily.module.css?17c6","components/RecommendedDaily/RecommendedDaily.jsx","webpack://health-project-app/./src/components/CalorieCalculatorForm/CalorieCalculatorForm.module.css?81ce","components/CalorieCalculatorForm/CalorieCalculatorForm.jsx","pages/Home/Home.jsx","redux/products/productSelectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RecommendedDaily_container__-GZ6P\",\"title\":\"RecommendedDaily_title__NqbWN\",\"recommendedCalories\":\"RecommendedDaily_recommendedCalories__mHniM\",\"smallText\":\"RecommendedDaily_smallText__hpo-V\",\"boldText\":\"RecommendedDaily_boldText__7qrWb\",\"listContainer\":\"RecommendedDaily_listContainer__IkKIn\",\"list\":\"RecommendedDaily_list__BXp5-\"};","import React from \"react\";\nimport Button from \"../common/Button/Button\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./RecommendedDaily.module.css\";\n\nconst RecommendedDaily = ({\n  recommendedDailyCaloriesIntake,\n  restrictedAliments,\n}) => {\n  return (\n    <div className={styles.container}>\n      <div className={styles.caloriesContainer}>\n        <h2 className={styles.title}>\n          Your recommended daily calorie intake is\n          <span className={styles.recommendedCalories}>\n            {Math.round(recommendedDailyCaloriesIntake)}\n            <span className={styles.smallText}>Kcal</span>\n          </span>\n        </h2>\n      </div>\n      <div className={styles.listContainer}>\n        <h3 className={styles.boldText}>Foods you should not eat</h3>\n        <ol className={styles.list}>\n          {restrictedAliments.slice(0, 4).map((aliment, index) => (\n            <li key={index}>{aliment.title}</li>\n          ))}\n        </ol>\n      </div>\n\n      <Link to={\"/login\"}>\n        {\" \"}\n        <Button text={\"Start losing weight\"} />\n      </Link>\n    </div>\n  );\n};\n\nexport default RecommendedDaily;\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"CalorieCalculatorForm_formContainer__XHb2D\",\"title\":\"CalorieCalculatorForm_title__2IyOa\",\"flexContainer\":\"CalorieCalculatorForm_flexContainer__0uIhp\",\"form\":\"CalorieCalculatorForm_form__CEL9M\",\"leftContainer\":\"CalorieCalculatorForm_leftContainer__i9ln7\",\"rightContainer\":\"CalorieCalculatorForm_rightContainer__A1S96\",\"inputContainer\":\"CalorieCalculatorForm_inputContainer__+MbjP\",\"label\":\"CalorieCalculatorForm_label__jVmrC\",\"input\":\"CalorieCalculatorForm_input__wbDuC\",\"radioGroup\":\"CalorieCalculatorForm_radioGroup__W6Fp3\",\"radioLabelText\":\"CalorieCalculatorForm_radioLabelText__pOM11\",\"radioLabel\":\"CalorieCalculatorForm_radioLabel__pRrp6\",\"button\":\"CalorieCalculatorForm_button__Tx2uE\",\"radioContainer\":\"CalorieCalculatorForm_radioContainer__QcoRj\"};","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Button from \"../../components/common/Button/Button\";\nimport Modal from \"../common/Modal/Modal\";\nimport RecommendedDaily from \"../RecommendedDaily/RecommendedDaily\";\nimport styles from \"./CalorieCalculatorForm.module.css\";\nimport {\n  selectRecommendedCalories,\n  selectRestrictedAliments,\n} from \"../../redux/products/productSelectors\";\n\nconst CalorieCalculatorForm = ({ apiCallFunction }) => {\n  const recommendedCalories = useSelector(selectRecommendedCalories);\n  const restrictedAliments = useSelector(selectRestrictedAliments);\n\n  const dispatch = useDispatch();\n  const [formData, setFormData] = useState({\n    height: \"\",\n    desiredWeight: \"\",\n    age: \"\",\n    currentWeight: \"\",\n    bloodGroupIndex: \"\",\n  });\n\n  const [result, setResult] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const formBloodType = [\"1\", \"2\", \"3\", \"4\"];\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const numericFormData = {\n      ...formData,\n      height: Number(formData.height),\n      desiredWeight: Number(formData.desiredWeight),\n      age: Number(formData.age),\n      currentWeight: Number(formData.currentWeight),\n      bloodGroupIndex: Number(formData.bloodGroupIndex),\n    };\n\n    try {\n      const data = await dispatch(apiCallFunction(numericFormData));\n      console.log(data);\n      setResult(data);\n      setIsModalOpen(true);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <section>\n      <div className={styles.formContainer}>\n        <h1 className={styles.title}>\n          Calculate your daily calorie intake right now\n        </h1>\n        <form className={styles.form} onSubmit={handleSubmit}>\n          <div className={styles.flexContainer}>\n            <div className={styles.leftContainer}>\n              <div className={styles.inputContainer}>\n                <input\n                  type=\"number\"\n                  id=\"height\"\n                  name=\"height\"\n                  placeholder=\"Height\"\n                  value={formData.height}\n                  onChange={handleChange}\n                  className={styles.input}\n                  required\n                />\n                <label htmlFor=\"height\" className={styles.label}>\n                  Height *\n                </label>\n              </div>\n\n              <div className={styles.inputContainer}>\n                <input\n                  type=\"number\"\n                  id=\"age\"\n                  name=\"age\"\n                  placeholder=\"Age\"\n                  value={formData.age}\n                  onChange={handleChange}\n                  className={styles.input}\n                  required\n                />\n                <label htmlFor=\"age\" className={styles.label}>\n                  Age *\n                </label>\n              </div>\n\n              <div className={styles.inputContainer}>\n                <input\n                  type=\"number\"\n                  id=\"currentWeight\"\n                  name=\"currentWeight\"\n                  placeholder=\"Current weight\"\n                  value={formData.currentWeight}\n                  onChange={handleChange}\n                  className={styles.input}\n                  required\n                />\n                <label htmlFor=\"currentWeight\" className={styles.label}>\n                  Current weight *\n                </label>\n              </div>\n            </div>\n\n            <div className={styles.rightContainer}>\n              <div className={styles.inputContainer}>\n                <input\n                  type=\"number\"\n                  id=\"desiredWeight\"\n                  name=\"desiredWeight\"\n                  placeholder=\"Desired weight\"\n                  value={formData.desiredWeight}\n                  onChange={handleChange}\n                  className={styles.input}\n                  required\n                />\n                <label htmlFor=\"desiredWeight\" className={styles.label}>\n                  Desired weight *\n                </label>\n              </div>\n\n              <div className={styles.radioContainer}>\n                <label className={styles.radioLabelText}>Blood type *</label>\n                <div className={styles.radioGroup}>\n                  {formBloodType.map((type) => (\n                    <label key={type} className={styles.radioLabel}>\n                      <input\n                        type=\"radio\"\n                        name=\"bloodGroupIndex\"\n                        value={type}\n                        checked={formData.bloodGroupIndex === type}\n                        onChange={handleChange}\n                        required\n                      />\n                      {type}\n                    </label>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n          <Button\n            text={\"Start losing weight\"}\n            type={\"submit\"}\n            extraClass={styles.button}\n          />\n        </form>\n\n        {isModalOpen && result && (\n          <Modal handleModalClose={handleCloseModal} isVisible={isModalOpen}>\n            <RecommendedDaily\n              recommendedDailyCaloriesIntake={recommendedCalories}\n              restrictedAliments={restrictedAliments}\n            />\n          </Modal>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default CalorieCalculatorForm;\n","import React from \"react\";\nimport CalorieCalculatorForm from \"../../components/CalorieCalculatorForm/CalorieCalculatorForm\";\nimport { getRecommendedCalories } from \"../../redux/products/productOperations\";\n\nconst Home = () => {\n  return <CalorieCalculatorForm apiCallFunction={getRecommendedCalories} />;\n};\n\nexport default Home;\n","// src/redux/health/healthSelectors.js\n\nexport const selectProducts = (state) => state.product.products;\n\nexport const selectRecommendedCalories = (state) =>\n  state.product.recommendedDailyCaloriesIntake;\n\nexport const selectRestrictedAliments = (state) =>\n  state.product.restrictedAliments;\n\nexport const selectConsumedProducts = (state) => state.product.consumedProducts;\n\nexport const selectLoading = (state) => state.product.loading;\n\nexport const selectError = (state) => state.product.error;\n\nexport const selectUserDiary = (state) => state.product.userDiary;\n\nexport const selectTotalCaloriesConsumed = (state) =>\n  state.product.userDiary.totalCaloriesConsumed;\n\nexport const selectRemainingCalories = (state) =>\n  state.product.userDiary.remainingCalories;\n\nexport const selectPercentageCaloriesConsumed = (state) =>\n  state.product.userDiary.percentageCaloriesConsumed;\n"],"names":["_ref","recommendedDailyCaloriesIntake","restrictedAliments","_jsxs","className","styles","container","children","_jsx","caloriesContainer","title","recommendedCalories","Math","round","smallText","listContainer","boldText","list","slice","map","aliment","index","Link","to","Button","text","apiCallFunction","useSelector","selectRecommendedCalories","selectRestrictedAliments","dispatch","useDispatch","formData","setFormData","useState","height","desiredWeight","age","currentWeight","bloodGroupIndex","result","setResult","isModalOpen","setIsModalOpen","handleChange","e","name","value","target","_objectSpread","onSubmit","async","preventDefault","numericFormData","Number","data","console","log","error","type","id","placeholder","onChange","required","htmlFor","checked","extraClass","Modal","handleModalClose","handleCloseModal","isVisible","RecommendedDaily","Home","CalorieCalculatorForm","getRecommendedCalories","selectProducts","state","product","products"],"sourceRoot":""}