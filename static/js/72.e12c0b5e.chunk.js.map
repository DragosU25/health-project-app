{"version":3,"file":"static/js/72.e12c0b5e.chunk.js","mappings":"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","sources":["webpack://health-project-app/./src/components/RecommendedDaily/RecommendedDaily.module.css?17c6","components/RecommendedDaily/RecommendedDaily.jsx","webpack://health-project-app/./src/components/CalorieCalculatorForm/CalorieCalculatorForm.module.css?81ce","components/CalorieCalculatorForm/CalorieCalculatorForm.jsx","pages/Home/Home.jsx","redux/products/productSelectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RecommendedDaily_container__42p59\",\"title\":\"RecommendedDaily_title__hgtfj\",\"recommendedCalories\":\"RecommendedDaily_recommendedCalories__46SUd\",\"smallText\":\"RecommendedDaily_smallText__EFa6h\",\"boldText\":\"RecommendedDaily_boldText__STR4E\",\"listContainer\":\"RecommendedDaily_listContainer__quJra\",\"list\":\"RecommendedDaily_list__uSYpf\"};","import React from \"react\";\r\nimport Button from \"../common/Button/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./RecommendedDaily.module.css\";\r\n\r\nconst RecommendedDaily = ({\r\n  recommendedDailyCaloriesIntake,\r\n  restrictedAliments,\r\n}) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.caloriesContainer}>\r\n        <h2 className={styles.title}>\r\n          Your recommended daily calorie intake is\r\n          <span className={styles.recommendedCalories}>\r\n            {Math.round(recommendedDailyCaloriesIntake)}\r\n            <span className={styles.smallText}>Kcal</span>\r\n          </span>\r\n        </h2>\r\n      </div>\r\n      <div className={styles.listContainer}>\r\n        <h3 className={styles.boldText}>Foods you should not eat</h3>\r\n        <ol className={styles.list}>\r\n          {restrictedAliments.slice(0, 4).map((aliment, index) => (\r\n            <li key={index}>{aliment.title}</li>\r\n          ))}\r\n        </ol>\r\n      </div>\r\n\r\n      <Link to={\"/login\"}>\r\n        {\" \"}\r\n        <Button text={\"Start losing weight\"} />\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecommendedDaily;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"CalorieCalculatorForm_formContainer__FoaOI\",\"title\":\"CalorieCalculatorForm_title__Y4J+V\",\"flexContainer\":\"CalorieCalculatorForm_flexContainer__1Mc7T\",\"form\":\"CalorieCalculatorForm_form__4JOo7\",\"leftContainer\":\"CalorieCalculatorForm_leftContainer__xBTRq\",\"rightContainer\":\"CalorieCalculatorForm_rightContainer__0qJTo\",\"inputContainer\":\"CalorieCalculatorForm_inputContainer__GYYCq\",\"label\":\"CalorieCalculatorForm_label__m4oni\",\"input\":\"CalorieCalculatorForm_input__rCyx2\",\"radioGroup\":\"CalorieCalculatorForm_radioGroup__R4LvF\",\"radioLabelText\":\"CalorieCalculatorForm_radioLabelText__5fyLP\",\"radioLabel\":\"CalorieCalculatorForm_radioLabel__5R6yf\",\"button\":\"CalorieCalculatorForm_button__SZq3i\",\"radioContainer\":\"CalorieCalculatorForm_radioContainer__2HAFr\"};","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Button from \"../../components/common/Button/Button\";\r\nimport Modal from \"../common/Modal/Modal\";\r\nimport RecommendedDaily from \"../RecommendedDaily/RecommendedDaily\";\r\nimport styles from \"./CalorieCalculatorForm.module.css\";\r\nimport {\r\n  selectRecommendedCalories,\r\n  selectRestrictedAliments,\r\n} from \"../../redux/products/productSelectors\";\r\n\r\nconst CalorieCalculatorForm = ({ apiCallFunction }) => {\r\n  const recommendedCalories = useSelector(selectRecommendedCalories);\r\n  const restrictedAliments = useSelector(selectRestrictedAliments);\r\n\r\n  const dispatch = useDispatch();\r\n  const [formData, setFormData] = useState({\r\n    height: \"\",\r\n    desiredWeight: \"\",\r\n    age: \"\",\r\n    currentWeight: \"\",\r\n    bloodGroupIndex: \"\",\r\n  });\r\n\r\n  const [result, setResult] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const formBloodType = [\"1\", \"2\", \"3\", \"4\"];\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const numericFormData = {\r\n      ...formData,\r\n      height: Number(formData.height),\r\n      desiredWeight: Number(formData.desiredWeight),\r\n      age: Number(formData.age),\r\n      currentWeight: Number(formData.currentWeight),\r\n      bloodGroupIndex: Number(formData.bloodGroupIndex),\r\n    };\r\n\r\n    try {\r\n      const data = await dispatch(apiCallFunction(numericFormData));\r\n      console.log(data);\r\n      setResult(data);\r\n      setIsModalOpen(true);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <div className={styles.formContainer}>\r\n        <h1 className={styles.title}>\r\n          Calculate your daily calorie intake right now\r\n        </h1>\r\n        <form className={styles.form} onSubmit={handleSubmit}>\r\n          <div className={styles.flexContainer}>\r\n            <div className={styles.leftContainer}>\r\n              <div className={styles.inputContainer}>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"height\"\r\n                  name=\"height\"\r\n                  placeholder=\"Height\"\r\n                  value={formData.height}\r\n                  onChange={handleChange}\r\n                  className={styles.input}\r\n                  required\r\n                />\r\n                <label htmlFor=\"height\" className={styles.label}>\r\n                  Height *\r\n                </label>\r\n              </div>\r\n\r\n              <div className={styles.inputContainer}>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"age\"\r\n                  name=\"age\"\r\n                  placeholder=\"Age\"\r\n                  value={formData.age}\r\n                  onChange={handleChange}\r\n                  className={styles.input}\r\n                  required\r\n                />\r\n                <label htmlFor=\"age\" className={styles.label}>\r\n                  Age *\r\n                </label>\r\n              </div>\r\n\r\n              <div className={styles.inputContainer}>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"currentWeight\"\r\n                  name=\"currentWeight\"\r\n                  placeholder=\"Current weight\"\r\n                  value={formData.currentWeight}\r\n                  onChange={handleChange}\r\n                  className={styles.input}\r\n                  required\r\n                />\r\n                <label htmlFor=\"currentWeight\" className={styles.label}>\r\n                  Current weight *\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={styles.rightContainer}>\r\n              <div className={styles.inputContainer}>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"desiredWeight\"\r\n                  name=\"desiredWeight\"\r\n                  placeholder=\"Desired weight\"\r\n                  value={formData.desiredWeight}\r\n                  onChange={handleChange}\r\n                  className={styles.input}\r\n                  required\r\n                />\r\n                <label htmlFor=\"desiredWeight\" className={styles.label}>\r\n                  Desired weight *\r\n                </label>\r\n              </div>\r\n\r\n              <div className={styles.radioContainer}>\r\n                <label className={styles.radioLabelText}>Blood type *</label>\r\n                <div className={styles.radioGroup}>\r\n                  {formBloodType.map((type) => (\r\n                    <label key={type} className={styles.radioLabel}>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"bloodGroupIndex\"\r\n                        value={type}\r\n                        checked={formData.bloodGroupIndex === type}\r\n                        onChange={handleChange}\r\n                        required\r\n                      />\r\n                      {type}\r\n                    </label>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Button\r\n            text={\"Start losing weight\"}\r\n            type={\"submit\"}\r\n            extraClass={styles.button}\r\n          />\r\n        </form>\r\n\r\n        {isModalOpen && result && (\r\n          <Modal handleModalClose={handleCloseModal} isVisible={isModalOpen}>\r\n            <RecommendedDaily\r\n              recommendedDailyCaloriesIntake={recommendedCalories}\r\n              restrictedAliments={restrictedAliments}\r\n            />\r\n          </Modal>\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default CalorieCalculatorForm;\r\n","import React from \"react\";\r\nimport CalorieCalculatorForm from \"../../components/CalorieCalculatorForm/CalorieCalculatorForm\";\r\nimport { getRecommendedCalories } from \"../../redux/products/productOperations\";\r\n\r\nconst Home = () => {\r\n  return <CalorieCalculatorForm apiCallFunction={getRecommendedCalories} />;\r\n};\r\n\r\nexport default Home;\r\n","// src/redux/health/healthSelectors.js\r\n\r\nexport const selectProducts = (state) => state.product.products;\r\n\r\nexport const selectRecommendedCalories = (state) =>\r\n  state.product.recommendedDailyCaloriesIntake;\r\n\r\nexport const selectRestrictedAliments = (state) =>\r\n  state.product.restrictedAliments;\r\n\r\nexport const selectConsumedProducts = (state) => state.product.consumedProducts;\r\n\r\nexport const selectLoading = (state) => state.product.loading;\r\n\r\nexport const selectError = (state) => state.product.error;\r\n\r\nexport const selectUserDiary = (state) => state.product.userDiary;\r\n\r\nexport const selectTotalCaloriesConsumed = (state) =>\r\n  state.product.userDiary.totalCaloriesConsumed;\r\n\r\nexport const selectRemainingCalories = (state) =>\r\n  state.product.userDiary.remainingCalories;\r\n\r\nexport const selectPercentageCaloriesConsumed = (state) =>\r\n  state.product.userDiary.percentageCaloriesConsumed;\r\n"],"names":["_ref","recommendedDailyCaloriesIntake","restrictedAliments","_jsxs","className","styles","container","children","_jsx","caloriesContainer","title","recommendedCalories","Math","round","smallText","listContainer","boldText","list","slice","map","aliment","index","Link","to","Button","text","apiCallFunction","useSelector","selectRecommendedCalories","selectRestrictedAliments","dispatch","useDispatch","formData","setFormData","useState","height","desiredWeight","age","currentWeight","bloodGroupIndex","result","setResult","isModalOpen","setIsModalOpen","handleChange","e","name","value","target","onSubmit","async","preventDefault","numericFormData","Number","data","console","log","error","type","id","placeholder","onChange","required","htmlFor","checked","extraClass","Modal","handleModalClose","handleCloseModal","isVisible","RecommendedDaily","Home","CalorieCalculatorForm","getRecommendedCalories","selectProducts","state","product","products"],"sourceRoot":""}